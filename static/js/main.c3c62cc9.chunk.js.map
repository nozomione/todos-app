{"version":3,"sources":["components/list-todos/ListTodos.module.scss","components/shared/alert/Alert.module.scss","components/edit-todo/EditTodo.module.scss","components/shared/modal/Modal.module.scss","components/shared/checkbox/Checkbox.module.scss","components/add-todo/AddTodo.module.scss","components/shared/button/Button.module.scss","components/delete-todo/DeleteTodo.module.scss","components/edit-todo/EditTodoButton.module.scss","models/alert.tsx","models/button.tsx","models/input.tsx","models/modal.tsx","models/todos.tsx","contexts/alert.tsx","contexts/modal.tsx","contexts/todos.tsx","hooks/useTodos/useTodos.tsx","hooks/useModal/useModal.tsx","hooks/useAlert/useAlert.tsx","components/shared/icon/Icon.tsx","utilities/icons.tsx","components/shared/alert/Alert.tsx","components/shared/button/Button.tsx","components/shared/checkbox/Checkbox.tsx","components/shared/input/Input.tsx","components/shared/modal/Modal.tsx","components/shared/portal/Portal.tsx","components/todos-app-header/TodosAppHeader.tsx","components/add-todo/AddTodo.tsx","components/list-todos/list-header/ListHeader.tsx","components/toggle-todo/ToggleTodo.tsx","components/delete-todo/DeleteTodo.tsx","components/delete-todo/DeleteTodoButton.tsx","components/edit-todo/EditTodo.tsx","components/edit-todo/EditTodoButton.tsx","components/list-todos/ListTodos.tsx","components/TodosApp.tsx","hooks/useMatchMedia/useMatchMedia.tsx","App.tsx","index.tsx"],"names":["module","exports","AlertTheme","ButtonTheme","InputRole","ModalTheme","TodosStatus","initialState","show","text","theme","NONE","icon","iconClass","iconName","alertContext","createContext","setAlertContext","AlertContextProvider","Provider","SetAlertontextProvider","AlertProvider","children","useState","alert","setAlert","value","initalState","modalContext","setModalContext","ModalContextProvider","SetModalContextProvider","ModalProvider","modal","setModal","todosContext","setTodosContext","TodosContextProvidor","SetTodosContextProvidor","TodosProvider","todos","setTodos","useTodos","useContext","useSetTodos","useModal","useSetModal","useSetAlert","Icon","name","path","className","xlinkHref","memo","icons","close","edit","error","info","list","success","todo","trash","warning","Alert","useEffect","timer","setTimeout","closeAlert","clearTimeout","styles","onClick","Button","type","clickHandler","Checkbox","changeHandler","placeholder","checked","grayOut","onChange","htmlFor","Input","role","focus","autoFocus","Modal","Portal","portal","document","getElementById","el","createElement","appendChild","removeChild","createPortal","TodosAppHeader","style","background","borderRadius","color","display","alignItems","marginLeft","padding","fontSize","margin","AddTodo","setText","empty","setEmpty","onSubmit","e","preventDefault","trim","length","prevState","id","Math","random","toString","substr","status","ACTIVE","done","TEXT","target","PRIMARY","ListHeader","activeCount","completedCount","toUpperCase","ToggleTodo","i","findIndex","updatedTodos","COMPLETED","DeleteTodo","todoId","cancel","showAlert","INFO","marginBottom","fontWeight","textAlign","justifyContent","filter","TERTIARY","DeleteTodoButton","LIGHT","EditTodo","setEditStatus","setSelectedTodo","updateTodos","undefined","SUCCESS","EditTodoButton","CHECKBOX","ListTodos","setEdit","setTodoId","dropOver","setDropOver","activeTodos","completedTodos","dragStartHandle","dataTransfer","setData","effectAllowed","currentTarget","cursor","dragEndHandle","classList","remove","moveTodo","updatedTodo","droppable","onDragOver","types","onDrop","getData","querySelector","onDragLeave","_","map","draggable","onDragStart","onDragEnd","TodosApp","match","isW800","query","media","window","matchMedia","matches","setMatches","addEventListener","removeEventListener","useMatchMedia","width","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c3c62cc9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"project-list\":\"ListTodos_project-list__3vEXW\",\"btn-utility\":\"ListTodos_btn-utility__4UpOM\",\"project-list--active\":\"ListTodos_project-list--active__22o9U\",\"project-list--completed\":\"ListTodos_project-list--completed__1ZIb7\",\"droppable\":\"ListTodos_droppable__1wVi7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert-overlay\":\"Alert_alert-overlay__3Gx9D\",\"alert-content\":\"Alert_alert-content__3NB0V\",\"alert-box\":\"Alert_alert-box__35rA1\",\"alert-box--success\":\"Alert_alert-box--success__AfoHL\",\"alert-box--info\":\"Alert_alert-box--info__3Vmhm\",\"alert-box--warning\":\"Alert_alert-box--warning__3lDgl\",\"alert-box--error\":\"Alert_alert-box--error__r7lVa\",\"close\":\"Alert_close__1hd9h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"edit-todo\":\"EditTodo_edit-todo__3r1JC\",\"edit-todo-overlay\":\"EditTodo_edit-todo-overlay__1rTxv\",\"edit-todo-box\":\"EditTodo_edit-todo-box__23BMH\",\"error\":\"EditTodo_error__vq9l7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1lAKP\",\"close\":\"Modal_close__1ssXH\",\"modal-content\":\"Modal_modal-content__1L8eu\",\"modal--dark\":\"Modal_modal--dark__1gouv\",\"modal--light\":\"Modal_modal--light__3QXNm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"custom-checkbox\":\"Checkbox_custom-checkbox__1wx67\",\"custom-checkbox--grayout\":\"Checkbox_custom-checkbox--grayout__2yiuY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add-todo\":\"AddTodo_add-todo__WeFZv\",\"error\":\"AddTodo_error__2gUE6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__14fP5\",\"btn--primary\":\"Button_btn--primary__2mENR\",\"btn--secondary\":\"Button_btn--secondary__1Aw40\",\"btn--tertiary\":\"Button_btn--tertiary__2pZAh\",\"btn--icon\":\"Button_btn--icon__3JTeY\",\"btn--disabled\":\"Button_btn--disabled__29KSe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete-todo\":\"DeleteTodo_delete-todo__1nuZa\",\"delete-todo-btn\":\"DeleteTodo_delete-todo-btn__I-mb-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"edit-todo-btn\":\"EditTodoButton_edit-todo-btn__YmoYK\"};","export enum AlertTheme {\n    SUCCESS=\"success\",\n    WARNING=\"warning\",\n    ERROR=\"error\",\n    INFO=\"info\",\n    NONE=\"\",\n}\n\nexport interface AlertInterface {  \n    show: boolean;\n    text: string;\n    theme: AlertTheme;    \n    icon: boolean;\n    iconClass: string;\n    iconName: string;\n}\n\n\n\n","export enum ButtonTheme {\n    PRIMARY=\"primary\",\n    SECONDARY=\"secondary\",\n    TERTIARY=\"tertiary\",\n    ICON=\"icon\",\n    DISABLED=\"disabled\"\n}\n\nexport interface ButtonInterface {\n    type: 'button' | 'submit' | 'reset';\n    theme?: ButtonTheme; \n    clickHandler?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    children: React.ReactNode\n}\n\n","export enum InputRole {\n    CHECKBOX=\"checkbox\",\n    RADIOBUTTON=\"radiobutton\",\n    SEARCH=\"search\",\n    TEXT=\"text\"\n}\n\nexport interface InputInterface {\n    type: 'checkbox' | 'radiobutton' | 'search' | 'text';\n    role:InputRole;\n    changeHandler?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    clickHandler?: (e: React.MouseEvent<HTMLInputElement>) => void;\n    value?: string;\n    placeholder?: string;\n    checked?: boolean;\n    children?: React.ReactNode;\n    focus?: boolean;\n}","export enum ModalTheme {\n    DARK=\"dark\",\n    LIGHT=\"light\"\n}\n\nexport interface ModalInterface {\n    show: boolean;\n    theme?: ModalTheme;\n    todoId?: string; \n    name?: string,\n}","export enum TodosStatus {\n    ACTIVE =\"active\",\n    COMPLETED =\"completed\",\n    NULL=\"\"\n}\n\nexport interface TodoInterface {\n    id: string;\n    text: string;\n    status: TodosStatus\n}","import { createContext, useState } from 'react';\nimport { AlertInterface, AlertTheme } from '../models';\n\nconst initialState: AlertInterface = {\n    show: false,\n    text:'',\n    theme: AlertTheme.NONE,\n    icon: false,\n    iconClass:'',\n    iconName: ''\n}\n\nexport const  alertContext = createContext<AlertInterface>(initialState);\nexport const  setAlertContext = createContext<React.Dispatch<React.SetStateAction<AlertInterface>> | null >(null);\nconst  AlertContextProvider = alertContext.Provider;\nconst  SetAlertontextProvider = setAlertContext.Provider;\n\nconst AlertProvider: React.FC = ({ children }) => {\n    const [alert, setAlert] = useState<AlertInterface>(initialState);\n\n    return(\n       <AlertContextProvider value={ alert }>\n           <SetAlertontextProvider value={ setAlert }>   \n                { children }\n           </SetAlertontextProvider>\n        </AlertContextProvider>\n    );\n}\n\nexport default AlertProvider;","import { createContext,  useState } from 'react';\nimport { ModalInterface } from '../models';\n\nconst initalState: ModalInterface = {\n    show: false\n}\n\nexport const modalContext = createContext<ModalInterface>(initalState);\nexport const setModalContext = createContext<React.Dispatch<React.SetStateAction<ModalInterface>> | null >(null);\nconst  ModalContextProvider = modalContext.Provider;\nconst  SetModalContextProvider = setModalContext.Provider;\n\nconst ModalProvider: React.FC = ({ children }) => {\n    const [modal, setModal] = useState<ModalInterface>(initalState);\n\n    return(\n       <ModalContextProvider value={ modal }>\n           <SetModalContextProvider value={ setModal }>   \n                { children }\n           </SetModalContextProvider>\n        </ModalContextProvider>\n    );\n}\n\nexport default ModalProvider;","import { createContext, useState } from 'react';\nimport { TodoInterface } from '../models';\n\nexport const todosContext = createContext<TodoInterface[]>([]);\nexport const setTodosContext =  createContext<React.Dispatch<React.SetStateAction<TodoInterface[]>> | null>(null); \nconst TodosContextProvidor = todosContext.Provider;\nconst SetTodosContextProvidor = setTodosContext.Provider;\n\nconst TodosProvider: React.FC = ({ children }) => {\n    const [ todos, setTodos ] = useState<TodoInterface[]>([]);\n\n    return (\n        <TodosContextProvidor value={ todos }>\n            <SetTodosContextProvidor value={ setTodos }>\n                { children }\n            </SetTodosContextProvidor>\n        </TodosContextProvidor>\n    );\n}\n\nexport default TodosProvider;","import { useContext } from 'react';\nimport { todosContext, setTodosContext } from './../../contexts';\n\nconst useTodos = () => useContext(todosContext);\nconst useSetTodos = () => useContext(setTodosContext);\n\nexport { useTodos, useSetTodos }","import { useContext } from 'react';\nimport { modalContext, setModalContext } from './../../contexts';\n\nconst useModal = () => useContext(modalContext);\nconst useSetModal = () => useContext(setModalContext);\n\nexport { useModal, useSetModal };","import { useContext } from 'react';\nimport { alertContext, setAlertContext } from './../../contexts';\n\nconst useAlert = () => useContext(alertContext);\nconst useSetAlert = () => useContext(setAlertContext);\n\nexport { useAlert, useSetAlert};","import { memo } from 'react';\n\ninterface Props {\n    name: string;\n    path: string;\n}\n\nconst Icon: React.FC<Props> = ({ name, path }) => {\n    return (\n        <svg className={ name } aria-hidden=\"true\">\n           <use xlinkHref={ path } />\n        </svg>\n    )\n}\n\nexport default memo(Icon);","export const icons: {\n\t[ key: string ]: string,\n} = {\n\tclose: './icons/close.svg#close',\n\tedit: './icons/edit.svg#edit',\n\terror: './icons/error.svg#error',\n\tinfo: './icons/info.svg#info',\n\tlist: './icons/list.svg#list',\n\tsuccess: './icons/success.svg#success',\n\ttodo: './icons/todo.svg#todo',\n\ttrash: './icons/trash.svg#trash',\n\twarning: './icons/warning.svg#warning'\n};\n","import { useEffect, memo } from 'react';\nimport { AlertTheme } from '../../../models';\nimport { useAlert, useSetAlert } from '../../../hooks';\nimport { Icon } from '../icon';\nimport { icons } from'../../../utilities/icons';\nimport styles from './Alert.module.scss';\n\nconst Alert: React.FC = () => {\n    const alert = useAlert();\n    const setAlert = useSetAlert()!;\n\n    useEffect(() => {\n        const timer = setTimeout(()=> {\n            closeAlert();\n        }, 3500);\n        return () => {\n            clearTimeout(timer);\n        }\n    \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [alert]);\n\n    const closeAlert = ()=> {\n        setAlert({\n            show: false,\n            text: '',\n            theme: AlertTheme.NONE,\n            icon:false,\n            iconName:'',\n            iconClass:''\n        });\n    }\n\n    return (\n        <>\n            { alert.show && \n                <div \n                    className={ styles[\"alert-overlay\"]} \n                    onClick={ closeAlert }>\n                    <div className={ `${styles[\"alert-box\"]} \n                        ${styles[\"alert-box--\"+alert.theme]}` }>\n                        <div \n                            onClick={ closeAlert } \n                            className={styles.close}>\n                            <span className=\"sr-only\">Close</span>\n                            <Icon name=\"icon--xxs\" path={ icons.close } />\n                        </div>\n                        <div className={ styles[\"alert-content\"] }>\n                            <Icon name={ alert.iconClass } path={ icons[alert.iconName] } />\n                            <p>{ alert.text }</p>\n                        </div>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default memo(Alert);\n","import { memo } from 'react';\nimport { ButtonInterface } from '../../../models';\nimport styles from './Button.module.scss';\n\nconst Button:React.FC<ButtonInterface> = ({\n    type, \n    theme, \n    children, \n    clickHandler\n}) => {\n    return (\n        <button \n            type={ type } \n            className={ `${styles[\"btn\"]} ${styles[\"btn--\"+theme]}` } \n            onClick={ clickHandler }>\n            { children }\n        </button>\n    )\n}\n\nexport default memo(Button);\n\n\n","import { memo } from 'react';\nimport { CheckboxInterface } from '../../../models';\nimport styles from './Checkbox.module.scss';\n\nconst Checkbox: React.FC<CheckboxInterface> = ({ \n    changeHandler, \n    clickHandler, \n    value, \n    name, \n    placeholder, \n    checked,\n    grayOut\n}) => {\n    return (\n        <div className={ grayOut ? \n            `${styles[\"custom-checkbox\"]} ${styles[\"custom-checkbox--grayout\"]}` \n            : styles[\"custom-checkbox\"] }>\n            <input \n                type=\"checkbox\"\n                onChange={ changeHandler }\n                onClick={ clickHandler }\n                value={ value }\n                name={ name }\n                placeholder={ placeholder }\n                checked={ checked }>\n            </input>\n            <label htmlFor={ name }></label>\n        </div>\n    )\n}\n\nexport default memo(Checkbox);\n\n\n","import { memo } from 'react';\nimport { InputInterface } from '../../../models';\n\nconst Input:React.FC<InputInterface> = ({\n    type, \n    role, \n    changeHandler, \n    clickHandler, \n    value, \n    placeholder, \n    checked,\n    children,\n    focus\n}) => {\n    return (  \n        <input \n            type={ type } \n            className={ `input-${role}` } \n            onChange={ changeHandler }\n            onClick={ clickHandler }\n            value={ value }\n            placeholder={ placeholder }\n            checked={ checked } \n            autoFocus={ focus }\n            >\n            { children }\n        </input>\n    )\n}\n\nexport default memo(Input);\n\n\n","import { ReactNode, memo } from 'react'\nimport { useModal, useSetModal } from '../../../hooks';\nimport { Icon } from '../icon';\nimport { icons } from'../../../utilities/icons';\nimport styles from './Modal.module.scss';\n\ntype Props = {\n    children: ReactNode\n}\nconst Modal: React.FC<Props> = ({ children }) => {\n    const modal = useModal();\n    const setModal = useSetModal()!;\n\n    const closeModal = () => {\n        setModal({ show: false });\n    }\n\n    return (\n        <>\n         { modal.show && \n            <div className={ `${styles.modal} ${styles[\"modal--\"+modal.theme]}` }>\n                <div onClick={closeModal} className={ styles.close }>\n                    <span className=\"sr-only\">Close</span>\n                    <Icon name=\"icon--sm\" path={ icons.close } />\n                </div>\n                <div className={ styles[\"modal-content\"] }>\n                    { children }\n                </div>\n            </div>\n         } \n        </>\n    )\n}\n\nexport default memo(Modal);\n","\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\n\nconst Portal: React.FC = ({ children }) => {\n  const portal = document.getElementById(\"portal\") as HTMLDivElement;\n  const el = document.createElement(\"div\");\n\n  useEffect(() => {\n    portal.appendChild(el);\n    \n    return () => {\n        portal.removeChild(el);\n      }\n  }, [portal, el])\n\n  return createPortal(children, el)\n};\n\nexport default Portal;","import { Icon } from '../shared';\nimport { icons } from '../../utilities/icons';\n\nconst TodosAppHeader: React.FC= () => {\n    const headerStyle = {\n        background: \"#6d6875\",\n        borderRadius: \"0 0 2px 2px\",\n        color: \"#fff\",\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        marginLeft: \"2rem\",\n        padding: \".5rem\",\n    } as React.CSSProperties;\n\n    const h1Style = {\n        fontSize: \".7rem\",\n        margin:\" .25rem 0 0 .2rem\"\n    } as React.CSSProperties;\n    \n    return (\n        <header style={ headerStyle }>\n            <Icon name=\"icon--xs\" path={ icons.todo } /> \n            <h1 style={ h1Style }>TODO APP</h1>\n        </header>\n    )\n}\n\nexport default TodosAppHeader;\n","import { useState, FormEvent, ChangeEvent, memo } from 'react';\nimport { TodosStatus, ButtonTheme, InputRole } from '../../models';\nimport { useSetTodos } from '../../hooks';\nimport { Button, Input } from '../shared';\nimport styles from './AddTodo.module.scss';\n\nconst AddTodo: React.FC = () => {\n    const [ text, setText ] = useState('');\n    const [ empty, setEmpty ] = useState(false); \n    const setTodos = useSetTodos()!;\n\n    const handleSubmit = (e: FormEvent)=> {\n        e.preventDefault();\n        if(text.trim().length === 0) {\n            setEmpty(true);\n            return;\n        }\n        setEmpty(false);\n        setTodos( prevState => ([\n                ...prevState,\n                {\n                    id: Math.random().toString(36).substr(2, 10),\n                    text: text,\n                    status: TodosStatus.ACTIVE,\n                    done: false\n                }\n           ])\n        );\n        setText('');\n    }\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setEmpty(false);\n        setText(e.target.value)\n    }\n \n    return (\n        <div className={ empty ?  \n            `${styles['add-todo']} ${styles.error}` : \n            `${styles['add-todo']}`}>\n            <form onSubmit={ handleSubmit }>\n                    <Input\n                        type=\"text\" \n                        role={ InputRole.TEXT }\n                        value={ text } \n                        changeHandler={ handleChange }\n                        placeholder=\"Add new todo!\" \n                        focus={ true }/>\n                \n                    { empty && \n                        <span>&#10035;Please enter a new todo.</span> }\n                <Button type=\"submit\" theme={ ButtonTheme.PRIMARY }>\n                    Add Todo\n                </Button>\n            </form>\n        </div>\n    )\n}\n\nexport default memo(AddTodo);\n","import { memo } from 'react';\nimport { Icon } from '../../shared';\nimport { icons } from '../../../utilities/icons';\n\ninterface Props {\n    type: string;\n    activeCount: number;\n    completedCount: number;\n}\nconst ListHeader: React.FC<Props> = ({ type, activeCount, completedCount }) => {\n    \n    return (\n        <header>\n            <Icon name=\"icon--xs\" path={ icons.list } />\n            <h2>\n                { type.toUpperCase() } \n                <span>( { type === \"active\" ? activeCount : completedCount } )</span>\n            </h2>\n        </header>\n    )\n}\n\nexport default memo(ListHeader);\n","import { useEffect, memo  } from 'react';\nimport { TodosStatus } from '../../models';\nimport { useTodos, useSetTodos } from '../../hooks';\nimport { Checkbox } from '../shared';\n\ninterface Props {\n    id: string;\n    status: string;\n    checked?:boolean;\n}\nconst ToggleTodo: React.FC<Props> = ({ id, checked, status }) => {\n    const todos = useTodos();\n    const setTodos = useSetTodos()!;\n    const i = todos.findIndex(todo => todo.id === id);\n    let timer:  NodeJS.Timeout;\n\n    useEffect(() => {\n        return () => {\n            clearTimeout(timer);\n        }\n    \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const toggleStatus = (e:React.ChangeEvent<HTMLInputElement>) => {  \n        const updatedTodos = [...todos];\n\n        if(e.target.checked) {\n            updatedTodos[i].status = TodosStatus.COMPLETED;\n        } else {\n            updatedTodos[i].status = TodosStatus.ACTIVE;\n        }\n\n        timer = setTimeout(()=> {\n            setTodos(updatedTodos);  \n        }, 1000);\n    }\n    \n    return (\n        <>\n            <Checkbox \n                checked={ checked } \n                changeHandler={ toggleStatus } \n                grayOut={ status === 'completed' ? true : false } />\n        </>\n    )\n}\n\nexport default memo(ToggleTodo);\n","import { memo } from 'react';\nimport { AlertTheme, ButtonTheme } from '../../models';\nimport { \n    useTodos, \n    useSetTodos, \n    useModal, \n    useSetModal, \n    useSetAlert} from '../../hooks';\nimport { Button } from '../shared';\n\nconst DeleteTodo: React.FC = () => {\n    const todos = useTodos();\n    const setTodos = useSetTodos()!;\n    const modal = useModal();\n    const setModal = useSetModal()!;\n    const setAlert = useSetAlert()!;\n    const i = todos.findIndex(todo=> todo.id === modal.todoId);\n \n    const handleClick = () => {\n        setTodos(todos.filter(todo => todo.id !== modal.todoId));\n        showAlert()\n        cancel();\n    }\n\n    const cancel = () => {\n        setModal(\n            {\n                show: false\n            }\n        )\n    }    \n\n    const showAlert = () => {\n        setAlert(\n            {\n                show: true,\n                text: `${todos[i].text} is deleted`,\n                theme: AlertTheme.INFO,\n                icon:  true,\n                iconClass: \"icon--xs\",\n                iconName: 'info'\n            }\n        )\n    }\n    \n    const h2Style = {\n        marginBottom: \"1rem\",\n        fontWeight: \"normal\",\n        textAlign: \"center\"\n    } as React.CSSProperties;\n\n    const divStyle = {\n        display: \"flex\",\n        justifyContent: \"center\"\n    } as React.CSSProperties;\n\n    return (\n        <>\n            <h2 style={ h2Style }>\n                Are you sure you want to delete \n                <strong>{ todos[i].text }</strong>?\n            </h2>\n            <div style={ divStyle }>\n                <Button type=\"button\" \n                    theme={ ButtonTheme.PRIMARY } \n                    clickHandler={ handleClick }>\n                    Yes\n                </Button> \n                <Button type=\"button\" \n                    theme={ ButtonTheme.TERTIARY } \n                    clickHandler={ cancel }>\n                    No\n                </Button> \n            </div>\n        </>\n    )\n}\n\nexport default memo(DeleteTodo)\n","import { memo } from 'react';\nimport { ModalTheme } from '../../models';\nimport { useModal, useSetModal } from '../../hooks';\nimport { Portal, Modal, Icon } from '../shared';\nimport DeleteTodo from './DeleteTodo';\nimport { icons } from '../../utilities/icons';\nimport styles from './DeleteTodo.module.scss';\n\ninterface Props {\n  id: string;\n}\n\nconst DeleteTodoButton: React.FC<Props> = ({ id }) => {\n    const modal = useModal();\n    const setModal = useSetModal()!;\n\n    const openModal = () => {        \n        setModal(\n            {\n                show: true,\n                theme: ModalTheme.LIGHT,\n                todoId: id,\n                name:'delete'\n            }\n        );\n    }\n\n    return (\n        <>   \n            <div className={styles[\"delete-todo-btn\"]} onClick={ openModal }>\n                <span className=\"sr-only\">Delete</span>\n                <Icon name=\"icon--sm\" path={ icons.trash } />\n            </div>\n            { modal.show && modal.todoId === id && \n                <Portal>\n                    <Modal>\n                        <DeleteTodo />\n                    </Modal>\n                </Portal> } \n        </>\n    )\n}\n\nexport default memo(DeleteTodoButton);\n","import { useState, memo } from 'react';\nimport { useTodos, useSetTodos, useSetAlert } from '../../hooks';\nimport { AlertTheme , ButtonTheme, InputRole } from '../../models';\nimport { Button, Input } from '../shared';\nimport { todoIdType } from './../list-todos';\nimport styles from './EditTodo.module.scss';\n\ninterface Props {\n    todoId: todoIdType;\n    setEditStatus: (s:boolean) => void;\n    setSelectedTodo: (id: string, i?: number) => void;\n}\nconst EditTodo: React.FC<Props> = ({ todoId, setEditStatus, setSelectedTodo }) => {\n    const todos = useTodos();\n    const setTodos = useSetTodos()!;\n    const setAlert = useSetAlert()!;\n    const [ text, setText ] = useState('');\n    const [ empty, setEmpty ] = useState(false); \n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        if(text.trim().length === 0) {\n            setEmpty(true);\n            return;\n        }\n\n        setEmpty(false);\n        updateTodos();\n        setText('');\n        cancel();\n        setAlert(\n            {\n                show: true,\n                text: `Successfully saved as ${text}`,\n                theme: AlertTheme.SUCCESS,\n                icon:  true,\n                iconClass: \"icon--xs\",\n                iconName: \"success\"\n            }\n        )\n    }\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {  \n        setEmpty(false);\n        setText(e.target.value);\n    }\n    \n    const updateTodos = ()=> {\n        const updatedTodos = [...todos];\n        updatedTodos[todoId.i!].text = text;\n        setTodos(updatedTodos);\n    }\n\n    const cancel = () => {\n        setEditStatus(false);\n        setSelectedTodo('', undefined);\n    }\n\n    return (\n        <div className={ empty ? \n            `${styles['edit-todo']} ${styles.error}` : \n            `${styles['edit-todo']}` }>\n            <div className={ styles[\"edit-todo-box\"] }>\n                <form onSubmit={ handleSubmit }>\n                    <Input \n                        type=\"text\" \n                        role={ InputRole.TEXT }\n                        value={ text } \n                        changeHandler={ handleChange }\n                        placeholder={ todos[todoId.i!].text } \n                        focus={ true }/>\n                    { empty &&  \n                        <span>&#10035;Please update the todo.</span> }\n                    <Button \n                        type=\"submit\" \n                        theme={ ButtonTheme.PRIMARY }>\n                        Save\n                    </Button>\n                    <Button \n                        type=\"button\" \n                        theme={ ButtonTheme.TERTIARY }\n                        clickHandler={ cancel }\n                    >\n                        Cancel\n                    </Button>\n                </form>\n            </div>\n            <div \n                className={ styles[\"edit-todo-overlay\"]} \n                onClick={ cancel }>\n            </div>\n        </div>\n    )\n}\n\nexport default memo(EditTodo);\n","import { memo } from 'react';\nimport { InputRole } from '../../models';\nimport { useTodos } from '../../hooks';\nimport { Icon, Input } from '../shared';\nimport { icons } from '../../utilities/icons';\nimport styles from './EditTodoButton.module.scss';\n\ninterface Props {\n    id: string;\n    setEditStatus: (s:boolean) => void;\n    setSelectedTodo: (id: string, i?: number) => void;\n}\nconst EditTodoButton: React.FC<Props> = ({ id, setSelectedTodo, setEditStatus }) => {\n    const todos = useTodos();\n    const i = todos.findIndex(todo => todo.id === id);\n\n    const toggleEdit = () => {\n            setSelectedTodo(id, i);\n            setEditStatus(true);\n    }\n\n    return (\n        <div className={ styles[\"edit-todo-btn\"] }>\n            <span className=\"sr-only\">Delete</span>\n            <Icon name=\"icon--sm\" path={ icons.edit } />\n            <Input \n                type=\"checkbox\" \n                role={ InputRole.CHECKBOX } \n                changeHandler={ toggleEdit } \n            />\n        </div>\n    )\n}\n\nexport default memo(EditTodoButton);","import { useEffect, memo, useState, DragEvent } from 'react';\nimport { TodosStatus } from '../../models';\nimport { useTodos, useSetTodos } from '../../hooks';\nimport { ListHeader } from './list-header';\nimport { ToggleTodo } from '../toggle-todo';\nimport { DeleteTodoButton } from '../delete-todo';\nimport { EditTodo, EditTodoButton } from '../edit-todo';\nimport styles from './ListTodos.module.scss';\n\ninterface Props {\n    type: string\n}\n\nexport type todoIdType = {\n    id: string;\n    i?:number;\n}\nconst ListTodos: React.FC<Props> = ({ type }) => {\n    const todos = useTodos();\n    const setTodos = useSetTodos()!;\n    const [ edit, setEdit ] = useState(false);\n    const [ todoId, setTodoId ] = useState<todoIdType>({ id: '' });\n    const [ dropOver, setDropOver ] = useState(false);\n    const activeTodos = todos.filter( todo => todo.status === TodosStatus.ACTIVE);\n    const completedTodos = todos.filter( todo => todo.status === TodosStatus.COMPLETED);\n\n    useEffect(() => {\n            setTodos([\n                {\n                    id: Math.random().toString(36).substr(2, 10),\n                    text: 'Finish reading a book',\n                    status: TodosStatus.ACTIVE\n                },\n                {\n                    id: Math.random().toString(36).substr(2, 10),\n                    text: 'Take my dog out to a doggy park',\n                    status: TodosStatus.ACTIVE\n                },\n                {\n                    id: Math.random().toString(36).substr(2, 10),\n                    text: 'Donate my clothes',\n                    status: TodosStatus.COMPLETED\n                }\n            ]) \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const setEditStatus = (status: boolean) => {\n        setEdit(status)\n    }\n\n    const setSelectedTodo = (id: string, i?: number) => {\n        setTodoId({\n            id,\n            i\n        });\n    }\n\n    const dragStartHandle = (e: DragEvent<HTMLLIElement>, id:string) => {\n        e.dataTransfer.setData('text/plain', id);\n        e.dataTransfer.effectAllowed = 'move';\n        e.currentTarget.style.cursor = 'grab'\n        \n    }\n\n    const dragEndHandle = (e: DragEvent<HTMLLIElement>) => {\n        e.currentTarget.classList.remove('active');\n        e.currentTarget.style.cursor = 'pointer'\n    }\n\n    const dragOverHandle = (e: DragEvent) =>{\n        if (e.dataTransfer && e.dataTransfer.types[0] === 'text/plain') {\n          e.preventDefault();\n          setDropOver(true);\n        }\n      }\n\n    const dropHandle = (e: DragEvent) => {\n        e.preventDefault();\n        const todoId = e.dataTransfer.getData('text/plain');\n        const ul = e.currentTarget.querySelector('ul') as HTMLUListElement;\n        const hasTodo = ul.querySelector(`li[data-id=\"${todoId}\"]`) != null;\n        if(hasTodo) {\n            setDropOver(false);\n            return;\n        }\n        moveTodo(todoId);\n        setDropOver(false);\n      }\n    \n    const dragLeaveHandle = (_: DragEvent) => {\n        setDropOver(false);\n      }\n    \n    const moveTodo = (id:string) => {\n        const updatedTodo = [...todos];\n        const i = todos.findIndex(todo => todo.id === id);\n        updatedTodo[i].status = \n            todos[i].status === 'active' ? TodosStatus.COMPLETED : TodosStatus.ACTIVE;\n        setTodos(updatedTodo);\n    }\n    const renderActiveTodos = ()=> \n        activeTodos.map(todo => (\n            <li key={ todo.id } \n                data-id={ todo.id }\n                draggable=\"true\"\n                onDragStart={ e => dragStartHandle(e, todo.id) }\n                onDragEnd={ dragEndHandle }>\n                <div className={ styles[\"btn-utility\"] }>\n                    <ToggleTodo id={ todo.id } status=\"active\"  />\n                    { edit && todo.id === todoId.id ?  \n                         <EditTodo \n                            todoId={ todoId } \n                            setEditStatus={ setEditStatus } \n                            setSelectedTodo={ setSelectedTodo }/> : \n                         <h3>{ todo.text }</h3> \n                    }\n                </div>\n                <div className={ styles[\"btn-utility\"] }>\n                    <EditTodoButton \n                        id={ todo.id } \n                        setEditStatus={ setEditStatus } \n                        setSelectedTodo={ setSelectedTodo } />\n                    <DeleteTodoButton id={ todo.id }/>\n                </div>\n            </li>\n        )\n    );\n\n    const renderCompletedTodos = ()=> \n        completedTodos.map(todo => (\n            <li \n                key={ todo.id } \n                data-id={ todo.id } \n                draggable=\"true\"\n                onDragStart={ e => dragStartHandle(e, todo.id) }\n                onDragEnd={ dragEndHandle }>\n                <div className={ styles[\"btn-utility\"] }>\n                    <ToggleTodo \n                        id={ todo.id } \n                        checked={ true } \n                        status=\"completed\" />\n                    <h3>{ todo.text }</h3>\n                </div>\n                <DeleteTodoButton id={ todo.id }/>\n            </li>\n        )\n    );\n\n    return (\n        <>\n            <section \n                className={ dropOver ? \n                    `${styles[\"project-list\"]} ${styles[\"project-list--\"+type]} ${styles.droppable}` :\n                    `${styles[\"project-list\"]} ${styles[\"project-list--\"+type]}` }\n                onDragOver={ dragOverHandle } \n                onDrop={ dropHandle }\n                onDragLeave={ dragLeaveHandle }>\n                <ListHeader \n                    type={ type } \n                    activeCount={ activeTodos.length } \n                    completedCount={ completedTodos.length }/>\n                { activeTodos.length === 0 && type === \"active\" && \n                    <p>Currently you have no active Todo to display.</p> }\n                { completedTodos.length === 0 && type === \"completed\" && \n                    <p>Currently you have no completed Todo to display.</p> }\n                <ul>\n                    { type === TodosStatus.ACTIVE && renderActiveTodos() }\n                    { type === TodosStatus.COMPLETED && renderCompletedTodos() }\n                </ul>\n            </section>\n        </>\n    )\n}\n\nexport default memo(ListTodos);\n","import { memo } from 'react';\nimport { TodosProvider, AlertProvider, ModalProvider } from '../contexts';\nimport { TodosStatus } from '../models';\nimport { useMatchMedia } from '../hooks';\nimport { Portal, Alert } from './shared';\nimport { TodosAppHeader } from './todos-app-header';\nimport { AddTodo } from './add-todo';\nimport { ListTodos } from './list-todos';\n\nconst TodosApp = () => {\n    const isW800 = useMatchMedia('(max-width: 1080px)');\n\n    const todoAppStyle = {\n        rules: (match: boolean) => ({\n            width: match ? \"100%\" : \"80%\",\n            margin: \"0 auto\"\n        })\n    } \n\n    return (\n        <div style={ todoAppStyle.rules(isW800) }>\n            <TodosAppHeader />\n            <TodosProvider>\n                <AlertProvider>\n                    <ModalProvider>\n                        <AddTodo />\n                        <ListTodos type={ TodosStatus.ACTIVE }/>\n                        <ListTodos type={ TodosStatus.COMPLETED }/>  \n                    </ModalProvider>\n                    <Portal>\n                        <Alert />\n                    </Portal>\n                </AlertProvider>\n            </TodosProvider>\n        </div>\n    )\n}\n\nexport default memo(TodosApp);\n","import { useState, useEffect } from 'react';\nconst useMatchMedia= (query: string) => {\n    const media = window.matchMedia(query);\n    const [matches, setMatches] = useState(media.matches);\n    const changeHandler = (e: MediaQueryListEvent) => {\n        setMatches(e.matches)\n    };\n    \n    useEffect(() => {\n        media.addEventListener('change', changeHandler);\n        return () => {\n            media.removeEventListener('change', changeHandler);\n        }\n \n    }, [media])\n\n    return matches;\n}\n\nexport { useMatchMedia };\n","import { memo } from 'react';\nimport './styles/app.scss';\nimport { TodosApp } from './components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodosApp />\n    </div>\n  );\n}\n\nexport default memo(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}